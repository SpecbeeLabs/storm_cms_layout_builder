<?php

/**
 * @file
 * Primary module hooks for storm_cms_layout_builder module.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function storm_cms_layout_builder_form_node_layout_builder_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['#attributes']['class'][] = 'storm-cms-layout-builder-form';
  $form['#attached']['library'][] = 'storm_cms_layout_builder/form';
  unset($form['revision_information']);
  $form['actions']['#weight'] = 200;
  $form['actions']['#attributes']['class'][] = 'storm-cms-layout-builder-form-actions';
  $form['revision']['#access'] = FALSE;
  $form['moderation_state']['#access'] = FALSE;
}

/**
 * Implements hook_link_alter().
 */
function storm_cms_layout_builder_link_alter(&$variables) {
  /** @var Drupal\Core\Url $url */
  $url = $variables['url'];
  $config = \Drupal::config('layout_builder_modal.settings');

  if (!$url->isRouted()) {
    return;
  }

  $routes = [
    'section_library.add_template_to_library',
    'section_library.add_section_to_library'
  ];

  if (in_array($url->getRouteName(), $routes) && isset($config)) {
    $data_dialog_options = Json::encode([
      'width' => $config->get('modal_width'),
      'height' => $config->get('modal_height'),
      'target' => 'layout-builder-modal',
      'autoResize' => $config->get('modal_autoresize'),
      'modal' => TRUE,
    ]);

    $variables['options']['attributes']['data-dialog-options'] = $data_dialog_options;
    $variables['options']['attributes']['data-dialog-type'] = 'dialog';
    unset($variables['options']['attributes']['data-dialog-renderer']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function storm_cms_layout_builder_preprocess_page(&$variables) {
  $route = \Drupal::routeMatch()->getRouteName();
  if($route === 'layout_builder.overrides.node.view') {
    $variables['#attached']['library'][] =  'storm_cms_layout_builder/layout-builder';
  }
}

/**
 * Implements hook_preprocess_layout().
 */
function storm_cms_layout_builder_preprocess_layout(&$variables) {
  $classes = [];

  $settings = $variables['settings']['storm_cms_layout_builder'];

  if ($variables['settings']) {
    if(isset($settings['section_background']) || isset($settings['padding']) || isset($settings['spacing']) || isset($settings['section_theme']['styles'])) {
      // Merge all modifier classes.
      $classes = array_merge($classes,
        $settings['section_background'],
        $settings['padding'],
        $settings['spacing'],
        $settings['section_theme']['styles']
      );
    }

    // Set section attributes.
    if (isset($settings['section_attributes'])) {
      if (isset($settings['section_attributes']['id']) && $settings['section_attributes']['id'] !== '') {
        $variables['attributes']['id'] = $settings['section_attributes']['id'];
      }
      if (isset($settings['section_attributes']['data']) && $settings['section_attributes']['data'] !== '') {
        $data_attrs = $settings['section_attributes']['data'];
        $data_attrs = preg_split('/\R/', $data_attrs);
        foreach ($data_attrs as $data_attr) {
          $data_attr = explode('|', $data_attr);
          $variables['attributes'][$data_attr[0]] = $data_attr[1] ?? TRUE;
        }
      }
    }
    $classes = array_filter($classes, fn ($m) => $m != 'none');
  }

  foreach ($classes as $class) {
    $variables['attributes']['class'][] = $class;
  }

}
